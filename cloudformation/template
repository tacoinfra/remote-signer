AWSTemplateFormatVersion: 2010-09-09
Description: >
  This template creates an autoscaling group of EC2 instances running the
  remote-signer
Parameters:
  ArtifactBucket:
    Type: String
    Default: tezos.hsm.remote-signer-artifacts
    AllowedValues:
      - tezos.hsm.remote-signer-artifacts
      - tezos.hsm.dev
  Artifact:
    Type: String
    Default: remote-signer-dev.tar.gz
    AllowedValues:
      - remote-signer-dev.tar.gz
      - remote-signer.tar.gz
  VPC:
    Type: 'AWS::EC2::VPC::Id'
  Subnets:
    Type: 'List<AWS::EC2::Subnet::Id>'
  VpcCIDR:
    Type: String
    Default: 10.0.0.0/16
  InstanceType:
    Type: String
    Default: t3.micro
  ClusterSize:
    Type: Number
    Default: 3
  LatestAmiId:
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: /aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2
    AllowedValues:
      - /aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2
      - /aws/service/ami-amazon-linux-latest/al2023-ami-kernel-default-x86_64
  KeyPair:
    Type: 'AWS::EC2::KeyPair::KeyName'
  HSMID:
    Type: String
    Default: cluster-id
  HSMAddress:
    Type: String
    Default: 10.0.40.1
  HSMUser:
    Type: String
    Default: remote_signer_user
  HSMSlot:
    Type: Number
    Default: 1
  HSMKeys:
    Type: List<String>
  HSMLibFile:
    Type: String
    Default: /opt/cloudhsm/lib/libcloudhsm_pkcs11.so
Metadata:
  'AWS::CloudFormation::Interface':
    ParameterLabels:
      ArtifactBucket:
        default: The S3 bucket that contains the remote signer artifacts
      Artifact:
        default: The zip file within the S3 artifact bucket that is the artifact
      VPC:
        default: Choose which VPC the autoscaling group should be deployed to
      Subnets:
        default: Choose which subnets the autoscaling group should be deployed to
      VpcCIDR:
        default: VPC CIDR Block
      InstanceType:
        default: Which instance type should we use to build the EC2 cluster?
      ClusterSize:
        default: How many EC2 hosts do you want to initially deploy?
      LatestAmiId:
        default: The EC2 AMI ID populated from SSM.
      KeyPair:
        default: >-
          Select the KeyPair that you would like to use for the EC2 cluster
          hosts
      HSMID:
        default: 'The CloudHSM cluster ID (example: cluster-m74pba4cdw6)'
      HSMAddress:
        default: The IP address of one of the VPC endpoints connected to the HSM
      HSMUser:
        default: The username we will login to the CloudHSM with
      HSMSlot:
        default: 'The slot in the CloudHSM we are using, typically 1'
      HSMKeys:
        default: The handle of the public key that we will base58 encode
      HSMLibFile:
        default: Typically /opt/cloudhsm/lib/libcloudhsm_pkcs11.so
    ParameterGroups:
      - Label:
          default: Artifact Configuration
        Parameters:
          - ArtifactBucket
          - Artifact
      - Label:
          default: VPC Configuration
        Parameters:
          - VPC
          - Subnets
          - VpcCIDR
      - Label:
          default: EC2 Configuration
        Parameters:
          - InstanceType
          - ClusterSize
          - LatestAmiId
          - KeyPair
      - Label:
          default: HSM Configuration
        Parameters:
          - HSMID
          - HSMAddress
          - HSMUser
          - HSMSlot
          - HSMKeys
          - HSMLibFile
Resources:
  SecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: !Sub '${AWS::StackName}-sg'
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref VpcCIDR
        - IpProtocol: tcp
          FromPort: 5000
          ToPort: 5000
          CidrIp: !Ref VpcCIDR
  AutoScalingGroup:
    Type: 'AWS::AutoScaling::AutoScalingGroup'
    Properties:
      VPCZoneIdentifier: !Ref Subnets
      LaunchTemplate:
        LaunchTemplateId: !Ref LaunchTemplate
        Version: !GetAtt 
          - LaunchTemplate
          - LatestVersionNumber
      MinSize: !Ref ClusterSize
      MaxSize: !Ref ClusterSize
      DesiredCapacity: !Ref ClusterSize
      TargetGroupARNs:
        - !Ref TargetGroup
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName} remote signer'
          PropagateAtLaunch: true
    CreationPolicy:
      ResourceSignal:
        Timeout: PT15M
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MinInstancesInService: 1
        MaxBatchSize: 1
        PauseTime: PT15M
        SuspendProcesses:
          - HealthCheck
          - ReplaceUnhealthy
          - AZRebalance
          - AlarmNotification
          - ScheduledActions
        WaitOnResourceSignals: true
  LaunchTemplate:
    Type: 'AWS::EC2::LaunchTemplate'
    Properties:
      LaunchTemplateName: !Sub '${AWS::StackName}-launchtemplate'
      LaunchTemplateData:
        ImageId: !Ref LatestAmiId
        InstanceType: !Ref InstanceType
        KeyName: !Ref KeyPair
        SecurityGroupIds:
          - !GetAtt 
            - SecurityGroup
            - GroupId
        IamInstanceProfile:
          Arn: !GetAtt 
            - InstanceProfile
            - Arn
        UserData: !Base64 
          'Fn::Sub': >
            #!/bin/bash -e

            mkdir /tmp/build; cd /tmp/build

            aws s3 cp s3://${ArtifactBucket}/${Artifact} - | tar zxvf -

            ./scripts/build-package-al2023

            cd /; rm -rf /tmp/build

            export HSMADDR=${HSMAddress} HSMID=${HSMID}
            REGION=${AWS::Region} STACKNAME=${AWS::StackName}

            /home/ec2-user/.local/bin/setup-al2023
    Metadata:
      'AWS::CloudFormation::Init':
        config:
          packages:
            yum:
              awslogs: []
          files:
            /etc/cfn/cfn-hup.conf:
              mode: 256
              owner: root
              group: root
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content: !Sub >
                [cfn-auto-reloader-hook]

                triggers=post.update

                path=Resources.LaunchTemplate.Metadata.AWS::CloudFormation::Init

                action=/opt/aws/bin/cfn-init -v --region ${AWS::Region} --stack
                ${AWS::StackName} --resource LaunchTemplate
            /etc/awslogs/awscli.conf:
              content: !Sub |
                [plugins]
                cwlogs = cwlogs
                [default]
                region = ${AWS::Region}
            /etc/awslogs/awslogs.conf:
              content: !Sub |
                [general]
                state_file = /var/lib/awslogs/agent-state

                [/var/log/dmesg]
                file = /var/log/dmesg
                log_group_name = ${AWS::StackName}-/var/log/dmesg
                log_stream_name = ${AWS::StackName}

                [/var/log/messages]
                file = /var/log/messages
                log_group_name = ${AWS::StackName}-/var/log/messages
                log_stream_name = ${AWS::StackName}
                datetime_format = %b %d %H:%M:%S

                [/home/ec2-user/remote-signer.log]
                file = /home/ec2-user/remote-signer.log
                log_group_name = ${AWS::StackName}-/remote-signer.log
                log_stream_name = ${AWS::StackName}
                datetime_format = %Y-$m-$d %H:%M:%S,%f
          services:
            sysvinit:
              cfn-hup:
                enabled: true
                ensureRunning: true
                files:
                  - /etc/cfn/cfn-hup.conf
                  - /etc/cfn/hooks.d/cfn-auto-reloader.conf
              awslogsd:
                enabled: true
                ensureRunning: true
                files:
                  - /etc/awslogs/awslogs.conf
                  - /etc/awslogs/awscli.conf
              cloudhsm-client:
                enabled: true
                ensureRunning: true
  LoadBalancer:
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    Properties:
      Name: !Sub '${AWS::StackName}-NLB'
      Type: network
      Scheme: internal
      Subnets: !Ref Subnets
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-NLB'
  TargetGroup:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    DependsOn: LoadBalancer
    Properties:
      VpcId: !Ref VPC
      Port: 5000
      Protocol: TCP
  Listener:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup
      LoadBalancerArn: !Ref LoadBalancer
      Port: 5000
      Protocol: TCP
  EC2Role:
    Type: 'AWS::IAM::Role'
    Properties:
      Path: /
      RoleName: !Sub '${AWS::StackName}-EC2Role-${AWS::Region}'
      AssumeRolePolicyDocument: |
        {
          "Statement": [{
            "Action": "sts:AssumeRole",
            "Effect": "Allow",
            "Principal": {
              "Service": "ec2.amazonaws.com"
            }
          }]
        }
      Policies:
        - PolicyName: ec2-policy
          PolicyDocument: |
            {
              "Statement": [{
                "Effect": "Allow",
                "Action": [
                  "logs:CreateLogStream",
                  "logs:PutLogEvents",
                  "ssm:DescribeAssociation",
                  "ssm:GetDeployablePatchSnapshotForInstance",
                  "ssm:GetDocument",
                  "ssm:GetManifest",
                  "ssm:GetParameters",
                  "ssm:ListAssociations",
                  "ssm:ListInstanceAssociations",
                  "ssm:PutInventory",
                  "ssm:PutComplianceItems",
                  "ssm:PutConfigurePackageResult",
                  "ssm:PutParameter",
                  "ssm:UpdateAssociationStatus",
                  "ssm:UpdateInstanceAssociationStatus",
                  "ssm:UpdateInstanceInformation",
                  "ec2messages:AcknowledgeMessage",
                  "ec2messages:DeleteMessage",
                  "ec2messages:FailMessage",
                  "ec2messages:GetEndpoint",
                  "ec2messages:GetMessages",
                  "ec2messages:SendReply",
                  "cloudwatch:PutMetricData",
                  "ec2:DescribeInstanceStatus",
                  "ds:CreateComputer",
                  "ds:DescribeDirectories",
                  "logs:CreateLogGroup",
                  "logs:CreateLogStream",
                  "logs:DescribeLogGroups",
                  "logs:DescribeLogStreams",
                  "logs:PutLogEvents",
                  "s3:PutObject",
                  "s3:GetObject",
                  "s3:DeleteObject",
                  "s3:AbortMultipartUpload",
                  "s3:ListMultipartUploadParts",
                  "s3:ListBucket",
                  "s3:ListBucketMultipartUploads",
                  "dynamodb:*"
                ],
                "Resource": "*"
              }]
            }
  InstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Path: /
      Roles:
        - !Ref EC2Role
  HSMParameter:
    Type: 'AWS::SSM::Parameter'
    Properties:
      Name: !Sub '/hsm/${HSMID}/${AWS::StackName}/keys'
      Description: 'A JSON containing the public keys, hashes, and slots used'
      Type: String
      Value:
        !Sub
        - |
          {
            "aws_region": "${AWS::Region}",
            "aws_stackname": "${AWS::StackName}",
            "bind_addr": "0.0.0.0",
            "chain_ratchet": "dynamodb",
            "ddb_table": "${DynamoDBTable}",
            "hsm_username": "${HSMUser}",
            "hsm_slot": ${HSMSlot},
            "hsm_lib": "${HSMLibFile}",
            "keys": [ "${Keys}" ],
            "policy": {
              "baking": 1,
              "voting": [ "pass" ]
            }
          }
        - Keys: !Join ["\", \"", !Ref HSMKeys]
  DynamoDBTable:
    Type: 'AWS::DynamoDB::Table'
    Properties:
      AttributeDefinitions:
        - AttributeName: type
          AttributeType: S
      KeySchema:
        - AttributeName: type
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
Outputs:
  TargetGroup:
    Value: !Ref TargetGroup
  ServiceUrl:
    Description: URL of the load balancer for the remote-signer service.
    Value: !Sub 'http://${LoadBalancer.DNSName}'
