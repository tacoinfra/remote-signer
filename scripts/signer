#!/usr/bin/env python3

import logging

from flask import Flask, Response, json, jsonify, request
from werkzeug.exceptions import HTTPException

from tezos_signer import SignatureReq, TacoinfraConfig


def logreq(sigreq, msg):
    if sigreq is not None:
        logging.info(f"Request: {sigreq.get_logstr()}:{msg}")

logging.basicConfig(filename='./remote-signer.log',
                    format='%(asctime)s %(threadName)s %(message)s',
                    level=logging.INFO)

app = Flask(__name__)
app.config['MAX_CONTENT_LENGTH'] = 65536

config = TacoinfraConfig('keys.json')

@app.route('/keys/<key_hash>', methods=['GET', 'POST'])
def sign(key_hash):
    response = None
    sigreq = None
    try:
        key = config.get_key(key_hash)
        if key is not None:
            if request.method == 'POST':
                sigreq = SignatureReq(request.get_json(force=True))
                response = jsonify({
                    'signature': key['signer'].sign(sigreq)
                })
            else:
                response = jsonify({ 'public_key': key['public_key'] })
        else:
            logging.warning(f"Couldn't find key {key_hash}")
            response = Response('Key not found', status=404)
    except HTTPException as e:
        logging.error(e)
        logreq(sigreq, "Failed")
        raise
    except Exception as e:
        data = {'error': str(e)}
        logging.error(f'Exception thrown during request: {str(e)}')
        response = app.response_class(
            response=json.dumps(data),
            status=500,
            mimetype='application/json'
        )
        logreq(sigreq, "Failed")
        return response

    logreq(sigreq, "Success")

    return response


@app.route('/authorized_keys', methods=['GET'])
def authorized_keys():
    return app.response_class(
        response=json.dumps({}),
        status=200,
        mimetype='application/json'
    )


if __name__ == '__main__':
    app.run(host=config.get_addr(), port=config.get_port())
